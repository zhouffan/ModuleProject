plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

def appId = rootProject.ext.appId
def application = rootProject.ext.application
def appVersion = rootProject.ext.appVersion
def dependenciesImport = rootProject.ext.dependenciesImport
def isRelease = rootProject.ext.isRelease

android {
    compileSdkVersion application.compileSdkVersion
    buildToolsVersion application.buildToolsVersion

    defaultConfig {
        applicationId appId.app

        minSdkVersion application.minSdkVersion
        targetSdkVersion application.targetSdkVersion
        versionCode appVersion.versionCode
        versionName appVersion.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //将当前构建环境状态写入 BuildConfig 文件中
        buildConfigField("boolean", "isRelease", String.valueOf(isRelease))
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

//    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
//    implementation 'androidx.core:core-ktx:1.3.2'
//    implementation 'androidx.appcompat:appcompat:1.2.0'
//    implementation 'com.google.android.material:material:1.2.1'
//    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    dependenciesImport.each { k, v -> implementation(v) }
    //2、当前是发布环境，那么需要引入其它子模块的Library
    if (isRelease) {
        implementation project(path: ':library-1')
    }

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}